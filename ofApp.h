#pragma once

#include "ofMain.h"
#include "sinOsc.hpp"
#include <fstream>

class ofApp : public ofBaseApp{

	public:
		void setup();
		void audioSetup();
		float randomPhase();
		void videoSetup();
		void ofSoundStreamSetup(ofSoundStreamSettings& settings);
		void audioOut(ofSoundBuffer &audioBuffer);
		void renderSample();
		inline float unipolar(float input);
		inline float left(float input, float pan);
		inline float right(float input, float pan);
		inline float modulateTwo(float inputA, float inputB, float ring, float amplitude);
		inline float modulateThree(float inputA, float inputB, float inputC, float ring);
		inline float averageTwo(float inputA, float inputB);
		inline float averageThree(float inputA, float inputB, float inputC);
		inline float filter(float z1, float z0, float lowRing, float lowPass, float highRing, float highPass);
		void draw();
		void refresh();
		void setUniforms();
		float scaleFrequency(float input);
		void setupWav();
		void writeToFile(ofstream& file, int value, int size);
		void recordSample(int channel);
		void exit();

		sinOsc redLFO;
		sinOsc greenLFO;
		sinOsc blueLFO;
		sinOsc blackLFO;
		sinOsc modulatorA;
		sinOsc modulatorB;
		sinOsc modulatorC;
		array<sinOsc, 2> carrierA;
		array<sinOsc, 2> carrierB;
		array<sinOsc, 2> carrierC;
		const int sampleRate = 48000;
		const int bufferSize = 256;
		const int channels = 2;
		const float bankSize = 800.0;
		ofSoundStreamSettings settings;
		ofSoundStream stream;
		float nyquist;
		float fundamentalFrequency;
		float ratio;
		float frequencyIncrement;
		float lowFrequencyIncrement;
		float frequencyA;
		float frequencyB;
		float frequencyC;
		float lowFrequencyA;
		float lowFrequencyB;
		float lowFrequencyC;
		float redSample;
		float greenSample;
		float blueSample;
		float blackSample;
		float modulatorASample;
		float modulatorBSample;
		float modulatorCSample;
		float modulatorAPan;
		float modulatorBPan;
		float modulatorCPan;
		float modulatorAAmplitude;
		float modulatorBAmplitude;
		float modulatorCAmplitude;
		float carrierAAmplitude;
		float carrierBAmplitude;
		float carrierCAmplitude;
		float carrierAPan;
		float carrierBPan;
		float carrierCPan;
		float abRingPan;
		float acRingPan;
		float bcRingPan;
		float abRing;
		float acRing;
		float bcRing;
		float abPan;
		float acPan;
		float bcPan;
		float abAmplitude;
		float acAmplitude;
		float bcAmplitude;
		float ringPan;
		float ring;
		float aLowRingPan;
		float bLowRingPan;
		float cLowRingPan;
		float aLowRing;
		float bLowRing;
		float cLowRing;
		float aLowPassPan;
		float bLowPassPan;
		float cLowPassPan;
		float aLowPass;
		float bLowPass;
		float cLowPass;
		float aHighRingPan;
		float bHighRingPan;
		float cHighRingPan;
		float aHighRing;
		float bHighRing;
		float cHighRing;
		float aHighPassPan;
		float bHighPassPan;
		float cHighPassPan;
		float aHighPass;
		float bHighPass;
		float cHighPass;
		float abLowRingPan;
		float acLowRingPan;
		float bcLowRingPan;
		float abLowRing;
		float acLowRing;
		float bcLowRing;
		float abLowPassPan;
		float acLowPassPan;
		float bcLowPassPan;
		float abLowPass;
		float acLowPass;
		float bcLowPass;
		float abHighRingPan;
		float acHighRingPan;
		float bcHighRingPan;
		float abHighRing;
		float acHighRing;
		float bcHighRing;
		float abHighPassPan;
		float acHighPassPan;
		float bcHighPassPan;
		float abHighPass;
		float acHighPass;
		float bcHighPass;
		float lowRingPan;
		float lowRing;
		float lowPassPan;
		float lowPass;
		float highRingPan;
		float highRing;
		float highPassPan;
		float highPass;
		array<float, 2> indexA;
		array<float, 2> indexB;
		array<float, 2> indexC;
		array<float, 2> carrierASample;
		array<float, 2> carrierBSample;
		array<float, 2> carrierCSample;
		array<float, 2> sampleA;
		array<float, 2> sampleB;
		array<float, 2> sampleC;
		array<float, 2> sampleABMix;
		array<float, 2> sampleACMix;
		array<float, 2> sampleBCMix;
		array<float, 2> sampleAB;
		array<float, 2> sampleAC;
		array<float, 2> sampleBC;
		array<float, 2> sampleMix;
		array<float, 2> sample;
		array<float, 2> lastSampleA;
		array<float, 2> lastSampleB;
		array<float, 2> lastSampleC;
		array<float, 2> lastSampleAB;
		array<float, 2> lastSampleAC;
		array<float, 2> lastSampleBC;
		array<float, 2> lastSample;

		float progress;

		ofFbo videoBuffer;
		ofShader shader;
		const int frameRate = 60;
		float width;
		float height;
		ofVec2f window;
		ofVec3f frequency;
		ofVec3f index;
		ofVec3f carrier;
		ofVec3f x;
		ofVec3f y;
		ofVec4f ab;
		ofVec4f ac;
		ofVec4f bc;
		ofVec2f abc;
		
		ofVec4f redLow;
		ofVec4f redHigh;
		ofVec4f greenLow;
		ofVec4f greenHigh;
		ofVec4f blueLow;
		ofVec4f blueHigh;
		ofVec4f redGreenLow;
		ofVec4f redGreenHigh;
		ofVec4f redBlueLow;
		ofVec4f redBlueHigh;
		ofVec4f greenBlueLow;
		ofVec4f greenBlueHigh;
		ofVec4f low;
		ofVec4f high;

		ofstream wavFile;
		const int byteDepth = 2;
		int preAudioP;
		int postAudioP;
		int sampleInt;
		int maxSampleInt;
};
